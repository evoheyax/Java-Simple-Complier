/* Generated By:JavaCC: Do not edit this line. simplejava.java */
public class simplejava implements simplejavaConstants {

  static final public ASTProgram program() throws ParseException {
        ASTClasses classes = new ASTClasses();
        ASTFunctionDefinitions functiondefinitions = new ASTFunctionDefinitions();
        ASTFunctionDefinition f;
        ASTPrototype p;
        ASTClass c;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      c = parseClass();
                              classes.addElement(c);
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      f = parseFunction();
                                  functiondefinitions.addElement(f);
    }
    jj_consume_token(0);
                     {if (true) return new ASTProgram(classes, functiondefinitions, 0);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatements parseBlock() throws ParseException {
        ASTStatements ss = new ASTStatements();
        ASTStatements se;
    jj_consume_token(LEFT_BRACE);
    se = parseBlockPrime(ss);
                                                {if (true) return se;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatements parseBlockPrime(ASTStatements ss) throws ParseException {
        ASTStatement s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case DO:
    case FOR:
    case RETURN:
    case IDENTIFIER:
    case LEFT_BRACE:
    case SEMICOLON:
      s = parseStatement();
                                ss.addElement(s);
      parseBlockPrime(ss);
      break;
    case RIGHT_BRACE:
      jj_consume_token(RIGHT_BRACE);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
           {if (true) return ss;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement parseStatement() throws ParseException {
  ASTStatement s;
  Token t1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t1 = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GETS:
      case LEFT_BRACKET:
      case PERIOD:
      case INCREMENT:
      case DECREMENT:
        s = parseAssignment(t1);
        break;
      case IDENTIFIER:
        s = parseDeclarationStatement(t1);
        break;
      case LEFT_PARENTHESIS:
        s = parseFunctionCall(t1);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case IF:
      s = parseIf();
      break;
    case WHILE:
      s = parseWhile();
      break;
    case LEFT_BRACE:
      s = parseBlock();
      break;
    case DO:
      s = parseDoWhile();
      break;
    case FOR:
      s = parseFor();
      break;
    case RETURN:
      s = parseReturn();
      break;
    case SEMICOLON:
      t1 = jj_consume_token(SEMICOLON);
                                         {if (true) return new ASTEmptyStatement(t1.beginLine);}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTForStatement parseFor() throws ParseException {
        Token t, t1;
        ASTStatement s, s2, s3;
        ASTExpression e;
    t = jj_consume_token(FOR);
    jj_consume_token(LEFT_PARENTHESIS);
    t1 = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      s = parseDeclarationStatement(t1);
      break;
    case GETS:
    case LEFT_BRACKET:
    case PERIOD:
    case INCREMENT:
    case DECREMENT:
      s = parseAssignment(t1);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    e = parseExpression();
    jj_consume_token(SEMICOLON);
    s2 = parseForAssignment();
    jj_consume_token(RIGHT_PARENTHESIS);
    s3 = parseStatement();
                                         {if (true) return new ASTForStatement(s, e, s2, s3, t.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTWhileStatement parseWhile() throws ParseException {
        Token t;
        ASTStatement s;
        ASTExpression e;
    t = jj_consume_token(WHILE);
    jj_consume_token(LEFT_PARENTHESIS);
    e = parseExpression();
    jj_consume_token(RIGHT_PARENTHESIS);
    s = parseStatement();
                                         {if (true) return new ASTWhileStatement(e, s, t.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTDoWhileStatement parseDoWhile() throws ParseException {
        Token t;
        ASTStatement s;
        ASTExpression e;
    t = jj_consume_token(DO);
    s = parseStatement();
    jj_consume_token(WHILE);
    e = parseExpression();
                                                                      {if (true) return new ASTDoWhileStatement(e, s, t.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTIfStatement parseIf() throws ParseException {
        Token t;
        ASTExpression e;
        ASTStatement s1;
        ASTStatement s2 = null;
    t = jj_consume_token(IF);
    jj_consume_token(LEFT_PARENTHESIS);
    e = parseExpression();
    jj_consume_token(RIGHT_PARENTHESIS);
    s1 = parseStatement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      s2 = parseStatement();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
                                                                                                                                 {if (true) return new ASTIfStatement(e, s1, s2, t.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement parseForAssignment() throws ParseException {
        Token t, t1;
        ASTVariable v;
        ASTExpression e;
    t1 = jj_consume_token(IDENTIFIER);
    v = parseVariable(t1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCREMENT:
      t = jj_consume_token(INCREMENT);
                            e = new ASTOperatorExpression(new ASTVariableExpression(v, t.beginLine), new ASTIntegerLiteral(1, t.beginLine), 1, t.beginLine);
      break;
    case DECREMENT:
      t = jj_consume_token(DECREMENT);
                            e = new ASTOperatorExpression(new ASTVariableExpression(v, t.beginLine), new ASTIntegerLiteral(1, t.beginLine), 2, t.beginLine);
      break;
    case GETS:
      t = jj_consume_token(GETS);
      e = parseExpression();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return new ASTAssignmentStatement(v, e, t.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement parseAssignment(Token t1) throws ParseException {
        Token t;
        ASTVariable v;
        ASTExpression e;
    v = parseVariable(t1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCREMENT:
      t = jj_consume_token(INCREMENT);
                            e = new ASTOperatorExpression(new ASTVariableExpression(v, t.beginLine), new ASTIntegerLiteral(1, t.beginLine), 1, t.beginLine);
      break;
    case DECREMENT:
      t = jj_consume_token(DECREMENT);
                            e = new ASTOperatorExpression(new ASTVariableExpression(v, t.beginLine), new ASTIntegerLiteral(1, t.beginLine), 2, t.beginLine);
      break;
    case GETS:
      t = jj_consume_token(GETS);
      e = parseExpression();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
          {if (true) return new ASTAssignmentStatement(v, e, t.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTVariableDefStatement parseDeclarationStatement(Token t1) throws ParseException {
  Token t2;
  ASTExpression e = null;
  int i = 0;
    t2 = jj_consume_token(IDENTIFIER);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_BRACKET:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      jj_consume_token(LEFT_BRACKET);
      jj_consume_token(RIGHT_BRACKET);
                                         i++;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    case GETS:
      jj_consume_token(GETS);
      e = parseExpression();
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return new ASTVariableDefStatement(t1.image, t2.image, i, e, t1.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTInstanceVariableDefs parseClassInstanceVariables() throws ParseException {
        ASTInstanceVariableDefs ivds = new ASTInstanceVariableDefs();
        ASTInstanceVariableDef ivd;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_4;
      }
      ivd = parseDeclarationInstance();
                                            ivds.addElement(ivd);
    }
          {if (true) return ivds;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTInstanceVariableDef parseDeclarationInstance() throws ParseException {
  Token t1, t2;
  ASTExpression e = null;
  int i = 0;
    t1 = jj_consume_token(IDENTIFIER);
    t2 = jj_consume_token(IDENTIFIER);
                                               i = 0;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_BRACKET:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_5;
      }
      jj_consume_token(LEFT_BRACKET);
      jj_consume_token(RIGHT_BRACKET);
                                         i++;
    }
    jj_consume_token(SEMICOLON);
          {if (true) return new ASTInstanceVariableDef(t1.image, t2.image, i, t1.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTFunctionCallStatement parseFunctionCall(Token t1) throws ParseException {
        ASTFunctionCallStatement s;
    jj_consume_token(LEFT_PARENTHESIS);
    s = parseStatementActuals(t1);
    jj_consume_token(RIGHT_PARENTHESIS);
    jj_consume_token(SEMICOLON);
                                                                                           {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression parseExpression() throws ParseException {
    Token t;
        ASTExpression e1, e2;
    e1 = e2();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
      t = jj_consume_token(OR);
      e2 = e2();
                                        e1 = new ASTOperatorExpression(e1, e2, t.image, t.beginLine);
    }
                                                                                                             {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression e2() throws ParseException {
    Token t;
        ASTExpression e1, e2;
    e1 = e3();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_7;
      }
      t = jj_consume_token(AND);
      e2 = e3();
                                         e1 = new ASTOperatorExpression(e1, e2, t.image, t.beginLine);
    }
                                                                                                              {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression e3() throws ParseException {
        Token t;
        ASTExpression e1, e2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
      t = jj_consume_token(BANG);
      e1 = e3();
                               {if (true) return new ASTUnaryOperatorExpression(e1, t.image, t.beginLine);}
      break;
    case NEW:
    case TRUE:
    case FALSE:
    case INTEGER_LITERAL:
    case IDENTIFIER:
    case MINUS:
    case LEFT_PARENTHESIS:
      e1 = e4();
                                                                                                                {if (true) return e1;}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression e4() throws ParseException {
        Token t;
        ASTExpression e1, e2;
    e1 = e5();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
      case DOES_NOT_EQUAL:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        t = jj_consume_token(EQUALS);
        break;
      case DOES_NOT_EQUAL:
        t = jj_consume_token(DOES_NOT_EQUAL);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = e5();
                                                                     e1 = new ASTOperatorExpression(e1, e2, t.image, t.beginLine);
    }
                                                                                                                                          {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression e5() throws ParseException {
        Token t;
        ASTExpression e1, e2;
    e1 = e6();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS_THAN:
      case GREATER_THAN:
      case LESS_THAN_OR_EQUAL_TO:
      case GREATER_THAN_OR_EQUAL_TO:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS_THAN:
        t = jj_consume_token(LESS_THAN);
        break;
      case LESS_THAN_OR_EQUAL_TO:
        t = jj_consume_token(LESS_THAN_OR_EQUAL_TO);
        break;
      case GREATER_THAN:
        t = jj_consume_token(GREATER_THAN);
        break;
      case GREATER_THAN_OR_EQUAL_TO:
        t = jj_consume_token(GREATER_THAN_OR_EQUAL_TO);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = e6();
                                                                                                                                     e1 = new ASTOperatorExpression(e1, e2, t.image, t.beginLine);
    }
                                                                                                                                                                                                          {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression e6() throws ParseException {
        Token t;
        ASTExpression e1, e2;
    e1 = e7();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = e7();
           e1 = new ASTOperatorExpression(e1, e2, t.image, t.beginLine);
    }
                                                                                {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression e7() throws ParseException {
        Token t;
        ASTExpression e1, e2;
    e1 = baseExpression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIVIDE:
        t = jj_consume_token(DIVIDE);
        break;
      case MULTIPLY:
        t = jj_consume_token(MULTIPLY);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = baseExpression();
                                                                                       e1 = new ASTOperatorExpression(e1, e2, t.image, t.beginLine);
    }
                                                                                                                                                            {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression baseExpression() throws ParseException {
        Token t;
        ASTVariable b;
        ASTExpression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      e = parseVariableExpression();
                                        {if (true) return e;}
      break;
    case NEW:
      e = parseNewVariableExpression();
                                       {if (true) return e;}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      t = jj_consume_token(INTEGER_LITERAL);
                                        {if (true) return new ASTOperatorExpression(new ASTIntegerLiteral(0, t.beginLine), new ASTIntegerLiteral(Integer.parseInt(t.image), t.beginLine), 2, t.beginLine);}
      break;
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                                {if (true) return new ASTIntegerLiteral(Integer.parseInt(t.image), t.beginLine);}
      break;
    case TRUE:
      t = jj_consume_token(TRUE);
                     {if (true) return new ASTBooleanLiteral(true, t.beginLine);}
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
                      {if (true) return new ASTBooleanLiteral(false, t.beginLine);}
      break;
    case LEFT_PARENTHESIS:
      t = jj_consume_token(LEFT_PARENTHESIS);
                                 e = parseExpression();
      jj_consume_token(RIGHT_PARENTHESIS);
                                                                                {if (true) return e;}
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTFunctionCallExpression parseExpressionActuals(Token t) throws ParseException {
  ASTFunctionCallExpression fce = new ASTFunctionCallExpression(t.image, t.beginLine);
  ASTExpression e;
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case IDENTIFIER:
      case MINUS:
      case LEFT_PARENTHESIS:
      case BANG:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_12;
      }
      e = parseExpression();
                                 fce.addElement(e);
    }
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_13;
      }
      jj_consume_token(COMMA);
      e = parseExpression();
                                                                                         fce.addElement(e);
    }
          {if (true) return fce;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTFunctionCallStatement parseStatementActuals(Token t) throws ParseException {
  ASTFunctionCallStatement fcs = new ASTFunctionCallStatement(t.image, t.beginLine);
  ASTExpression e;
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case IDENTIFIER:
      case MINUS:
      case LEFT_PARENTHESIS:
      case BANG:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_14;
      }
      e = parseExpression();
                                 fcs.addElement(e);
    }
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_15;
      }
      jj_consume_token(COMMA);
      e = parseExpression();
                                                                                         fcs.addElement(e);
    }
          {if (true) return fcs;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTFormals parseFormals() throws ParseException {
  Token t, t2;
  ASTFormals fs = new ASTFormals();
  int i = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      t2 = jj_consume_token(IDENTIFIER);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_BRACKET:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_16;
        }
        jj_consume_token(LEFT_BRACKET);
        jj_consume_token(RIGHT_BRACKET);
                                                                               i++;
      }
                                                                                          fs.addElement(new ASTFormal(t.image, t2.image, i, t.beginLine)); i = 0;
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_17;
      }
      jj_consume_token(COMMA);
      t = jj_consume_token(IDENTIFIER);
      t2 = jj_consume_token(IDENTIFIER);
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_BRACKET:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_18;
        }
        jj_consume_token(LEFT_BRACKET);
        jj_consume_token(RIGHT_BRACKET);
                                                                                                                                                                                                                                                     i++;
      }
                                                                                                                                                                                                                                                                fs.addElement(new ASTFormal(t.image, t2.image, i, t.beginLine)); i = 0;
    }
          {if (true) return fs;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression parseNewVariableExpression() throws ParseException {
        Token t;
        ASTVariable b;
        ASTExpression e;
        int i = 1;
    jj_consume_token(NEW);
    t = jj_consume_token(IDENTIFIER);
                                 b = new ASTBaseVariable(t.image, t.beginLine);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PARENTHESIS:
      jj_consume_token(LEFT_PARENTHESIS);
      jj_consume_token(RIGHT_PARENTHESIS);
                                                    {if (true) return new ASTNewClassExpression(t.image, t.beginLine);}
      break;
    case LEFT_BRACKET:
      jj_consume_token(LEFT_BRACKET);
      e = parseExpression();
      jj_consume_token(RIGHT_BRACKET);
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_BRACKET:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_19;
        }
        jj_consume_token(LEFT_BRACKET);
        jj_consume_token(RIGHT_BRACKET);
                                                                                                 i++;
      }
                                                                                                            {if (true) return new ASTNewArrayExpression(t.image, e, i, t.beginLine);}
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return new ASTVariableExpression(b, t.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression parseVariableExpression() throws ParseException {
        Token t;
        ASTVariable b;
        ASTExpression e;
    t = jj_consume_token(IDENTIFIER);
                           b = new ASTBaseVariable(t.image, t.beginLine);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PARENTHESIS:
      jj_consume_token(LEFT_PARENTHESIS);
      e = parseExpressionActuals(t);
      jj_consume_token(RIGHT_PARENTHESIS);
                                                                                  {if (true) return e;}
      break;
    default:
      jj_la1[37] = jj_gen;
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_BRACKET:
        case PERIOD:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_20;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_BRACKET:
          jj_consume_token(LEFT_BRACKET);
          e = parseExpression();
          jj_consume_token(RIGHT_BRACKET);
                                                                    b = new ASTArrayVariable(b, e, t.beginLine);
          break;
        case PERIOD:
          jj_consume_token(PERIOD);
          t = jj_consume_token(IDENTIFIER);
                                           b = new ASTClassVariable(b, t.image, t.beginLine);
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
          {if (true) return new ASTVariableExpression(b, t.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTVariable parseVariable(Token t) throws ParseException {
        ASTVariable b;
        ASTExpression e;
          b = new ASTBaseVariable(t.image, t.beginLine);
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_BRACKET:
      case PERIOD:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_21;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_BRACKET:
        jj_consume_token(LEFT_BRACKET);
        e = parseExpression();
        jj_consume_token(RIGHT_BRACKET);
                                                                   b = new ASTArrayVariable(b, e, t.beginLine);
        break;
      case PERIOD:
        jj_consume_token(PERIOD);
        t = jj_consume_token(IDENTIFIER);
                                           b = new ASTClassVariable(b, t.image, t.beginLine);
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTClass parseClass() throws ParseException {
        Token t;
        ASTInstanceVariableDefs ivd;
    jj_consume_token(CLASS);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(LEFT_BRACE);
    ivd = parseClassInstanceVariables();
    jj_consume_token(RIGHT_BRACE);
                                                                                                   {if (true) return new ASTClass(t.image, ivd, t.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTFunctionDefinition parseFunction() throws ParseException {
        Token t1, t2;
        ASTFormals f;
        ASTStatement s = null;
    t1 = jj_consume_token(IDENTIFIER);
    t2 = jj_consume_token(IDENTIFIER);
    jj_consume_token(LEFT_PARENTHESIS);
    f = parseFormals();
    jj_consume_token(RIGHT_PARENTHESIS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_BRACE:
      s = parseBlock();
                                                                                                                          {if (true) return new ASTFunction(t1.image, t2.image, f, s, t1.beginLine);}
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
                                                                                                                                                                                                            {if (true) return new ASTPrototype(t1.image, t2.image, f, t1.beginLine);}
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTReturnStatement parseReturn() throws ParseException {
        Token t;
        ASTExpression e = null;
    t = jj_consume_token(RETURN);
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case IDENTIFIER:
      case MINUS:
      case LEFT_PARENTHESIS:
      case BANG:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_22;
      }
      e = parseExpression();
    }
    jj_consume_token(SEMICOLON);
                                                            {if (true) return new ASTReturnStatement(e, t.beginLine);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public simplejavaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[42];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000,0x100000,0x3010ba00,0x46100000,0x1010ba00,0x6100000,0x400,0x2000000,0x2000000,0x4000000,0x2000000,0x100000,0x4000000,0x0,0x0,0x405f0000,0x0,0x0,0x0,0x0,0x600000,0x600000,0x1800000,0x1800000,0x405f0000,0x405f0000,0x0,0x405f0000,0x0,0x4000000,0x100000,0x0,0x4000000,0x4000000,0x44000000,0x4000000,0x4000000,0x40000000,0x4000000,0x4000000,0x10000000,0x405f0000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x4,0x3001,0x4,0x3001,0x0,0x3000,0x3000,0x0,0x4,0x0,0x0,0x400,0x200,0x800,0x18,0x18,0x1e0,0x1e0,0x0,0x0,0x0,0x0,0x0,0x800,0x2,0x800,0x2,0x0,0x0,0x2,0x0,0x0,0x0,0x1,0x1,0x0,0x1,0x1,0x4,0x800,};
   }

  /** Constructor with InputStream. */
  public simplejava(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public simplejava(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new simplejavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public simplejava(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new simplejavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public simplejava(simplejavaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(simplejavaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 42; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
